// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.


// Generated by Quartus Prime Version 17.1 (Build Build 590 10/25/2017)
// Created on Fri May 11 10:14:28 2018

p2 p2_inst
(
	.clockp2(clockp2_sig) ,	// input  clockp2_sig
	.command(command_sig) ,	// input [15:0] command_sig
	.pc(pc_sig) ,	// input [15:0] pc_sig
	.writetarget(writetarget_sig) ,	// input [2:0] writetarget_sig
	.readoutwriteval(readoutwriteval_sig) ,	// input [15:0] readoutwriteval_sig
	.writeflag(writeflag_sig) ,	// input  writeflag_sig
	.aluwriteval(aluwriteval_sig) ,	// input [15:0] aluwriteval_sig
	.readoutSelect(readoutSelect_sig) ,	// input  readoutSelect_sig
	.clockp5(clockp5_sig) ,	// input  clockp5_sig
	.alu1(alu1_sig) ,	// output [15:0] alu1_sig
	.alu2(alu2_sig) ,	// output [15:0] alu2_sig
	.writereg(writereg_sig) ,	// output  writereg_sig
	.memwrite(memwrite_sig) ,	// output [1:0] memwrite_sig
	.regaddress(regaddress_sig) ,	// output [2:0] regaddress_sig
	.opcode(opcode_sig) ,	// output [3:0] opcode_sig
	.address(address_sig) ,	// output [15:0] address_sig
	.storedata(storedata_sig) ,	// output [15:0] storedata_sig
	.isbranchout(isbranchout_sig) ,	// output  isbranchout_sig
	.condout(condout_sig) ,	// output [2:0] condout_sig
	.pcp2out(pcp2out_sig) ,	// output [15:0] pcp2out_sig
	.regtest1(regtest1_sig) ,	// output [15:0] regtest1_sig
	.regtest2(regtest2_sig) ,	// output [15:0] regtest2_sig
	.regtest3(regtest3_sig) 	// output [15:0] regtest3_sig
);

